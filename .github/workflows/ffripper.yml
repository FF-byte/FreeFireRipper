name: SATURN LK

on:
  workflow_dispatch:
    inputs:
      code:
        description: pay gorno 
        required: true

jobs:
  build:
    name: say gex
    runs-on: windows-latest
    timeout-minutes: 43800

    steps:
    - name: Disable Firewall Profiles
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        } catch {
          Write-Host "Failed to disable firewall. Continuing..."
        }
    - name: Check for Pending Reboots and Reboot if Necessary
      run: |
        function Test-PendingReboot {
            $rebootRequired = (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending") -or
                              (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired") -or
                              (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\PendingFileRenameOperations")
            if ($rebootRequired) {
                Write-Host "A reboot is required. Rebooting system."
                Restart-Computer -Force
                Start-Sleep -Seconds 120
            } else {
                Write-Host "No pending reboot detected."
            }
        }
        Test-PendingReboot
    - name: Install Necessary Packages
      run: |
        function Install-PackageWithRetry {
            param ([string]$packageName, [string]$packageUrl)
            $maxRetries = 3
            $retryCount = 0
            $logDirectory = "C:\Temp\ChromeInstallLogs"  # Specify a valid log directory
            if (-not (Test-Path $logDirectory)) {
                New-Item -ItemType Directory -Path $logDirectory -Force
            }
            
            while ($retryCount -lt $maxRetries) {
                try {
                    # Clear cached MSI installers and previous installation logs
                    Remove-Item -Path "C:\Users\runneradmin\AppData\Local\Temp\chocolatey\GoogleChrome\*" -Recurse -Force

                    # Check if the package is already installed (skip if already installed)
                    if (choco list --local-only | Select-String $packageName) {
                        Write-Host "$packageName is already installed. Skipping installation."
                        return
                    }
                    
                    # Re-download package from URL if the source isn't available
                    Write-Host "Downloading $packageName from source."
                    choco install $packageName -y --ignore-checksums --install-arguments "'/l*v $logDirectory\GoogleChromeInstall.log'"
                    Write-Host "$packageName installed successfully."
                    return
                } catch {
                    Write-Host "Retrying $packageName install ($($retryCount+1)/$maxRetries)"
                    Start-Sleep -Seconds 10
                    $retryCount++
                }
            }
            Write-Host "$packageName failed to install after multiple attempts. Continuing..."
        }

        # Uninstall any existing Chrome installations first (to avoid conflicts)
        $chromeUninstallPath = Get-WmiObject -Query "SELECT * FROM Win32_Product WHERE Name = 'Google Chrome'" | Select-Object -ExpandProperty IdentifyingNumber
        if ($chromeUninstallPath) {
            Write-Host "Uninstalling existing Google Chrome."
            msiexec /x $chromeUninstallPath /quiet /norestart
            Start-Sleep -Seconds 5
        }

        # Install Chrome Remote Desktop if not already installed
        Install-PackageWithRetry -packageName "chrome-remote-desktop-host" -packageUrl "https://dl.google.com/dl/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi"

        # Install Google Chrome if not already installed
        Install-PackageWithRetry -packageName "googlechrome" -packageUrl "https://dl.google.com/dl/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi"
        
    - name: Download and Extract Free Fire Ripper
      continue-on-error: true
      run: |
        cd C:\Users\$Env:USERNAME\Documents
        try {
          Invoke-WebRequest -Uri "https://drive.usercontent.google.com/download?id=11EUFz6hufNT1g56-CmOJw9_KxMERZxhe&export=download" -OutFile ffripper.zip
          7z x ffripper.zip -y
        } catch {
          Write-Host "Download or extraction failed."
          exit 1
        }
    - name: Start Chrome Remote Desktop
      continue-on-error: true
      run: |
        function Start-RemoteDesktop {
          $paths = @("${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe", "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe")
          foreach ($path in $paths) {
              if (Test-Path $path) { & $path; return }
          }
          Write-Host "Chrome Remote Desktop's remoting_start_host.exe not found."
        }
        Start-RemoteDesktop
    - name: Create Symbolic Links
      run: |
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\FenixGaga\Engine\ProjectTitan.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Free Fire.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\ninjaripper\x86\NinjaRipper.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Ninjaripper.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\noesis\Noesis64.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Noesis.lnk"
    - name: Start Remote Desktop Session
      continue-on-error: true
      run: |
        Write-Host "Connecting to VM with Remote Desktop"
        ${{ inputs.code }} --pin=123456
    - name: Keep Connection Active pay gorno 
      run: |
        $i = 43800
        do {
            Write-Host $i
            Start-Sleep 60
            $i--
        } while ($i -gt 0)
