name: SATURN LK

on:
  workflow_dispatch:
    inputs:
      code:
        description: pay gorno
        required: true

jobs:
  build:
    name: say gex
    runs-on: windows-latest
    timeout-minutes: 43800

    steps:
    - name: Disable Firewall Profiles
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        } catch {
          Write-Host "Failed to disable firewall. Continuing..."
        }

    - name: Install Chocolatey
      run: |
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        }
        # Manually refresh environment variables
        $env:PATH = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
        Write-Host "Environment variables refreshed manually."

    - name: Install Chrome and Remote Desktop with Retry
      run: |
        function Install-ChocoPackage {
            param (
                [string]$PackageName,
                [int]$MaxRetries = 3
            )
            $retry = 0
            do {
                try {
                    Write-Host "Attempting to install $PackageName (Attempt $($retry + 1)/$MaxRetries)"
                    choco install $PackageName -y --no-progress
                    Write-Host "$PackageName installed successfully."
                    return
                } catch {
                    Write-Host "Failed to install $PackageName. Retrying..."
                    $retry++
                    Start-Sleep -Seconds 10
                }
            } while ($retry -lt $MaxRetries)
            Write-Host "Failed to install $PackageName after $MaxRetries attempts."
        }

        Install-ChocoPackage -PackageName "chrome-remote-desktop-host"
        Install-ChocoPackage -PackageName "googlechrome"

    - name: Download and Extract Free Fire Ripper
      continue-on-error: true
      run: |
        cd C:\Users\$Env:USERNAME\Documents
        try {
          Invoke-WebRequest -Uri "https://drive.usercontent.google.com/download?id=11EUFz6hufNT1g56-CmOJw9_KxMERZxhe&export=download" -OutFile ffripper.zip
          7z x ffripper.zip -y
        } catch {
          Write-Host "Download or extraction failed."
          exit 1
        }

    - name: Start Chrome Remote Desktop
      continue-on-error: true
      run: |
        function Start-RemoteDesktop {
          $paths = @("${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe", "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe")
          foreach ($path in $paths) {
              if (Test-Path $path) { & $path; return }
          }
          Write-Host "Chrome Remote Desktop's remoting_start_host.exe not found."
        }
        Start-RemoteDesktop

    - name: Create Symbolic Links
      run: |
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\FenixGaga\Engine\ProjectTitan.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Free Fire.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\ninjaripper\x86\NinjaRipper.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Ninjaripper.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\noesis\Noesis64.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Noesis.lnk"

    - name: Start Remote Desktop Session
      continue-on-error: true
      run: |
        Write-Host "Connecting to VM with Remote Desktop"
        ${{ inputs.code }} --pin=123456

    - name: Keep Connection Active pay gorno 
      run: |
        $i = 43800
        do {
            Write-Host $i
            Start-Sleep 60
            $i--
        } while ($i -gt 0)
