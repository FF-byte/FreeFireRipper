name: SATURN LK

on:
  workflow_dispatch:
    inputs:
      code:
        description: pay gorno
        required: true

jobs:
  build:
    name: say gex
    runs-on: windows-latest
    timeout-minutes: 43800

    steps:
    - name: Disable Firewall Profiles
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        } catch {
          Write-Host "Failed to disable firewall. Continuing..."
        }

    - name: Check for Pending Reboots and Reboot if Necessary
      run: |
        function Test-PendingReboot {
            $rebootRequired = (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending") -or
                              (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired") -or
                              (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\PendingFileRenameOperations")
            if ($rebootRequired) {
                Write-Host "A reboot is required. Rebooting system."
                Restart-Computer -Force
                Start-Sleep -Seconds 120
            } else {
                Write-Host "No pending reboot detected."
            }
        }
        Test-PendingReboot

    - name: Uninstall Existing Google Chrome
      run: |
        function Uninstall-Chrome {
            try {
                $chromeUninstallPath = Get-WmiObject -Query "SELECT * FROM Win32_Product WHERE Name = 'Google Chrome'" | Select-Object -ExpandProperty IdentifyingNumber
                if ($chromeUninstallPath) {
                    Write-Host "Uninstalling existing Google Chrome."
                    msiexec /x $chromeUninstallPath /quiet /norestart
                    Start-Sleep -Seconds 5
                } else {
                    Write-Host "Google Chrome not found in installed programs. Removing manually."
                    Remove-Item -Path "C:\Program Files (x86)\Google\Chrome" -Recurse -Force
                    Remove-Item -Path "C:\Program Files\Google\Chrome" -Recurse -Force
                    Remove-Item -Path "C:\Users\$Env:USERNAME\AppData\Local\Google\Chrome" -Recurse -Force
                    Remove-Item -Path "HKCU:\Software\Google\Chrome" -Recurse -ErrorAction SilentlyContinue
                    Remove-Item -Path "HKLM:\SOFTWARE\Google\Chrome" -Recurse -ErrorAction SilentlyContinue
                }
            } catch {
                Write-Host "Failed to uninstall Google Chrome."
            }
        }
        Uninstall-Chrome

    - name: Install Chrome and Remote Desktop
      run: |
        choco upgrade chocolatey -y
        function Install-Package {
            param ([string]$packageName, [string]$packageUrl)
            try {
                if (choco list --local-only | Select-String $packageName) {
                    Write-Host "$packageName is already installed. Skipping."
                    return
                }
                Write-Host "Downloading and installing $packageName."
                Invoke-WebRequest -Uri $packageUrl -OutFile "C:\Temp\$packageName.msi"
                Start-Process "msiexec.exe" -ArgumentList "/i C:\Temp\$packageName.msi /quiet /norestart" -Wait
            } catch {
                Write-Host "Failed to install $packageName."
            }
        }
        Install-Package -packageName "chrome-remote-desktop-host" -packageUrl "https://dl.google.com/dl/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi"
        Install-Package -packageName "googlechrome" -packageUrl "https://dl.google.com/dl/edgedl/chrome/install/latest/googlechromestandaloneenterprise64.msi"

    - name: Download and Extract Free Fire Ripper
      continue-on-error: true
      run: |
        try {
            $url = "https://drive.usercontent.google.com/download?id=11EUFz6hufNT1g56-CmOJw9_KxMERZxhe&export=download"
            Invoke-WebRequest -Uri $url -OutFile "C:\Temp\ffripper.zip"
            Expand-Archive -Path "C:\Temp\ffripper.zip" -DestinationPath "C:\Users\$Env:USERNAME\Documents"
        } catch {
            Write-Host "Failed to download or extract ffripper.zip."
        }

    - name: Start Chrome Remote Desktop
      continue-on-error: true
      run: |
        function Start-RemoteDesktop {
            $paths = @(
                "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
                "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
                "${Env:LOCALAPPDATA}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
            )
            foreach ($path in $paths) {
                if (Test-Path $path) {
                    & $path
                    return
                }
            }
            Write-Host "Chrome Remote Desktop's remoting_start_host.exe not found."
        }
        Start-RemoteDesktop

    - name: Create Symbolic Links
      run: |
        function Create-Symlink {
            param ($Target, $LinkPath)
            if (Test-Path $Target) {
                New-Item -ItemType SymbolicLink -Target $Target -Path $LinkPath -Force
                Write-Host "Created symlink: $LinkPath -> $Target"
            } else {
                Write-Host "Target $Target does not exist. Skipping link creation."
            }
        }
        Create-Symlink -Target "C:\Users\$Env:USERNAME\Documents\FenixGaga\Engine\ProjectTitan.exe" -LinkPath "C:\Users\$Env:USERNAME\Desktop\Free Fire.lnk"
        Create-Symlink -Target "C:\Users\$Env:USERNAME\Documents\ninjaripper\x86\NinjaRipper.exe" -LinkPath "C:\Users\$Env:USERNAME\Desktop\Ninjaripper.lnk"
        Create-Symlink -Target "C:\Users\$Env:USERNAME\Documents\noesis\Noesis64.exe" -LinkPath "C:\Users\$Env:USERNAME\Desktop\Noesis.lnk"

    - name: Start Remote Desktop Session
      continue-on-error: true
      run: |
        Write-Host "Connecting to VM with Remote Desktop"
        ${{ inputs.code }} --pin=123456

    - name: Keep Connection Active
      run: |
        try {
            for ($i = 43800; $i -gt 0; $i--) {
                Write-Host "Keeping connection alive... Remaining: $i minutes"
                Start-Sleep -Seconds 60
            }
        } catch {
            Write-Host "Connection activity script interrupted."
        }
