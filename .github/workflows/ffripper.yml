name: SATURN LK

on:
  workflow_dispatch:
    inputs:
      code:
        description: pay gorno
        required: true

jobs:
  build:
    name: say gex
    runs-on: windows-latest
    timeout-minutes: 43800

    steps:
    - name: Disable Firewall Profiles
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        } catch {
          Write-Host "Failed to disable firewall. Continuing..."
        }

    - name: Check for Pending Reboots and Reboot if Necessary
      run: |
        function Test-PendingReboot {
            $rebootRequired = (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending") -or
                              (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired") -or
                              (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\PendingFileRenameOperations")
            if ($rebootRequired) {
                Write-Host "A reboot is required. Rebooting system."
                Restart-Computer -Force
                Start-Sleep -Seconds 120
            } else {
                Write-Host "No pending reboot detected."
            }
        }
        Test-PendingReboot

    - name: Install Chocolatey and Refresh Environment
      run: |
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        }
        # Refresh the environment variables
        refreshenv

    - name: Install Chrome and Remote Desktop with Retry
      run: |
        function Install-ChocoPackage {
            param (
                [string]$PackageName,
                [int]$MaxRetries = 3
            )
            $retry = 0
            do {
                try {
                    Write-Host "Attempting to install $PackageName (Attempt $($retry + 1)/$MaxRetries)"
                    choco install $PackageName -y --no-progress
                    Write-Host "$PackageName installed successfully."
                    return
                } catch {
                    Write-Host "Failed to install $PackageName. Retrying..."
                    $retry++
                    Start-Sleep -Seconds 10
                }
            } while ($retry -lt $MaxRetries)
            Write-Host "Failed to install $PackageName after $MaxRetries attempts."
        }

        Install-ChocoPackage -PackageName "chrome-remote-desktop-host"
        Install-ChocoPackage -PackageName "googlechrome"

    - name: Download and Extract Free Fire Ripper
      continue-on-error: true
      run: |
        try {
            $url = "https://drive.usercontent.google.com/download?id=11EUFz6hufNT1g56-CmOJw9_KxMERZxhe&export=download"
            Invoke-WebRequest -Uri $url -OutFile "C:\Temp\ffripper.zip"
            Expand-Archive -Path "C:\Temp\ffripper.zip" -DestinationPath "C:\Users\$Env:USERNAME\Documents"
        } catch {
            Write-Host "Failed to download or extract ffripper.zip."
        }

    - name: Start Chrome Remote Desktop
      continue-on-error: true
      run: |
        function Start-RemoteDesktop {
            $paths = @(
                "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
                "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
                "${Env:LOCALAPPDATA}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
            )
            foreach ($path in $paths) {
                if (Test-Path $path) {
                    & $path
                    return
                }
            }
            Write-Host "Chrome Remote Desktop's remoting_start_host.exe not found."
        }
        Start-RemoteDesktop

    - name: Create Symbolic Links
      run: |
        function Create-Symlink {
            param ($Target, $LinkPath)
            if (Test-Path $Target) {
                New-Item -ItemType SymbolicLink -Target $Target -Path $LinkPath -Force
                Write-Host "Created symlink: $LinkPath -> $Target"
            } else {
                Write-Host "Target $Target does not exist. Skipping link creation."
            }
        }
        Create-Symlink -Target "C:\Users\$Env:USERNAME\Documents\FenixGaga\Engine\ProjectTitan.exe" -LinkPath "C:\Users\$Env:USERNAME\Desktop\Free Fire.lnk"
        Create-Symlink -Target "C:\Users\$Env:USERNAME\Documents\ninjaripper\x86\NinjaRipper.exe" -LinkPath "C:\Users\$Env:USERNAME\Desktop\Ninjaripper.lnk"
        Create-Symlink -Target "C:\Users\$Env:USERNAME\Documents\noesis\Noesis64.exe" -LinkPath "C:\Users\$Env:USERNAME\Desktop\Noesis.lnk"

    - name: Start Remote Desktop Session
      continue-on-error: true
      run: |
        Write-Host "Connecting to VM with Remote Desktop"
        ${{ inputs.code }} --pin=123456

    - name: Keep Connection Active
      run: |
        try {
            for ($i = 43800; $i -gt 0; $i--) {
                Write-Host "Keeping connection alive... Remaining: $i minutes"
                Start-Sleep -Seconds 60
            }
        } catch {
            Write-Host "Connection activity script interrupted."
        }
