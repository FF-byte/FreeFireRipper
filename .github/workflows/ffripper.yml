name: SATURN LK

on:
  workflow_dispatch:
    inputs:
      code:
        description: pay gorno
        required: true

jobs:
  build:
    name: say gex
    runs-on: windows-latest
    timeout-minutes: 1440 # Adjusted timeout to 24 hours

    steps:
    # Step 1: Reboot the System
    - name: Reboot System
      run: |
        Write-Host "Rebooting system to ensure a clean environment..."
        Restart-Computer -Force -Delay 5
        Start-Sleep -Seconds 60

    # Step 2: Log System Information
    - name: Log System Information
      run: |
        Write-Host "Logging system details for diagnostics..."
        Get-ComputerInfo | Out-File -FilePath C:\SystemInfo.txt
        Write-Host "System information saved to C:\SystemInfo.txt."

    # Step 3: Disable Firewall Profiles
    - name: Disable Firewall Profiles
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        } catch {
          Write-Host "Failed to disable firewall. Continuing..."
        }

    # Step 4: Install Chocolatey
    - name: Install Chocolatey
      run: |
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        }
        $env:PATH = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
        Write-Host "Chocolatey installed and environment variables refreshed."

    # Step 5: Cleanup Existing Chrome Installation
    - name: Cleanup Existing Chrome Installation
      run: |
        if (Get-Command "chrome" -ErrorAction SilentlyContinue) {
            Write-Host "Removing existing Google Chrome installation."
            choco uninstall googlechrome -y || msiexec /x "{GUID_OF_CHROME}" /quiet /norestart
        } else {
            Write-Host "No existing Google Chrome installation detected."
        }

    # Step 6: Install Chrome and Remote Desktop with Retry
    - name: Install Chrome and Remote Desktop
      run: |
        function Install-ChocoPackage {
            param (
                [string]$PackageName,
                [int]$MaxRetries = 3
            )
            $retry = 0
            do {
                try {
                    Write-Host "Attempting to install $PackageName (Attempt $($retry + 1)/$MaxRetries)"
                    choco install $PackageName -y --no-progress
                    Write-Host "$PackageName installed successfully."
                    return
                } catch {
                    Write-Host "Failed to install $PackageName. Retrying..."
                    $retry++
                    Start-Sleep -Seconds 10
                }
            } while ($retry -lt $MaxRetries)
            Write-Host "Failed to install $PackageName after $MaxRetries attempts."
        }

        Install-ChocoPackage -PackageName "chrome-remote-desktop-host"

        if (!(Get-Command "chrome" -ErrorAction SilentlyContinue)) {
            Write-Host "Google Chrome not installed, attempting installation..."
            try {
                choco install googlechrome -y --install-arguments="'/l*v c:\GoogleChromeInstall.log'"
                Write-Host "Google Chrome installed successfully."
            } catch {
                Write-Host "Failed to install Google Chrome with Chocolatey. Retrying with manual installation."
                Invoke-WebRequest -Uri "https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi" -OutFile "C:\googlechrome.msi"
                msiexec /i "C:\googlechrome.msi" /quiet /norestart /l*v "C:\GoogleChromeManualInstall.log"
            }
        } else {
            Write-Host "Google Chrome is already installed."
        }

    # Step 7: Download and Extract Free Fire Ripper
    - name: Download and Extract Free Fire Ripper
      run: |
        cd C:\Users\$Env:USERNAME\Documents
        if (-not (Test-Path "ffripper.zip")) {
            try {
                Invoke-WebRequest -Uri "https://drive.usercontent.google.com/download?id=11EUFz6hufNT1g56-CmOJw9_KxMERZxhe&export=download" -OutFile ffripper.zip
                Write-Host "Free Fire Ripper downloaded successfully."
            } catch {
                Write-Host "Failed to download Free Fire Ripper. Exiting."
                exit 1
            }
        }
        try {
            7z x ffripper.zip -y
            Write-Host "Extraction successful."
        } catch {
            Write-Host "Failed to extract Free Fire Ripper. Exiting."
            exit 1
        }

    # Step 8: Start Chrome Remote Desktop
    - name: Start Chrome Remote Desktop
      run: |
        function Start-RemoteDesktop {
            $paths = @("${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe", "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe")
            foreach ($path in $paths) {
                if (Test-Path $path) {
                    & $path
                    Write-Host "Chrome Remote Desktop started successfully."
                    return
                }
            }
            Write-Host "Chrome Remote Desktop's remoting_start_host.exe not found. Exiting."
            exit 1
        }
        Start-RemoteDesktop

    # Step 9: Create Symbolic Links
    - name: Create Symbolic Links
      run: |
        try {
            New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\FenixGaga\Engine\ProjectTitan.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Free Fire.lnk"
            New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\ninjaripper\x86\NinjaRipper.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Ninjaripper.lnk"
            New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\noesis\Noesis64.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Noesis.lnk"
            Write-Host "Symbolic links created successfully."
        } catch {
            Write-Host "Failed to create symbolic links. Exiting."
            exit 1
        }

    # Step 10: Start Remote Desktop Session
    - name: Start Remote Desktop Session
      run: |
        try {
            Write-Host "Connecting to VM with Remote Desktop"
            ${{ inputs.code }} --pin=123456
        } catch {
            Write-Host "Failed to start remote desktop session. Exiting."
            exit 1
        }

    # Step 11: Keep Connection Active
    - name: Keep Connection Active pay gorno
      run: |
        $i = 1440 # Adjusted to 24 hours
        do {
            Write-Host $i
            Start-Sleep 60
            $i--
        } while ($i -gt 0)
